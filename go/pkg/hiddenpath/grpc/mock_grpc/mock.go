// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/pkg/hiddenpath/grpc (interfaces: Lookuper)

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	seg "github.com/scionproto/scion/go/lib/ctrl/seg"
	hiddenpath "github.com/scionproto/scion/go/pkg/hiddenpath"
	reflect "reflect"
)

// MockLookuper is a mock of Lookuper interface
type MockLookuper struct {
	ctrl     *gomock.Controller
	recorder *MockLookuperMockRecorder
}

// MockLookuperMockRecorder is the mock recorder for MockLookuper
type MockLookuperMockRecorder struct {
	mock *MockLookuper
}

// NewMockLookuper creates a new mock instance
func NewMockLookuper(ctrl *gomock.Controller) *MockLookuper {
	mock := &MockLookuper{ctrl: ctrl}
	mock.recorder = &MockLookuperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLookuper) EXPECT() *MockLookuperMockRecorder {
	return m.recorder
}

// Segments mocks base method
func (m *MockLookuper) Segments(arg0 context.Context, arg1 hiddenpath.SegmentRequest) ([]*seg.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Segments", arg0, arg1)
	ret0, _ := ret[0].([]*seg.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Segments indicates an expected call of Segments
func (mr *MockLookuperMockRecorder) Segments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Segments", reflect.TypeOf((*MockLookuper)(nil).Segments), arg0, arg1)
}
