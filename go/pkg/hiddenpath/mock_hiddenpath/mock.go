// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/pkg/hiddenpath (interfaces: SegmentDBRead)

// Package mock_hiddenpath is a generated GoMock package.
package mock_hiddenpath

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	addr "github.com/scionproto/scion/go/lib/addr"
	hiddenpath "github.com/scionproto/scion/go/pkg/hiddenpath"
	reflect "reflect"
)

// MockSegmentDBRead is a mock of SegmentDBRead interface
type MockSegmentDBRead struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentDBReadMockRecorder
}

// MockSegmentDBReadMockRecorder is the mock recorder for MockSegmentDBRead
type MockSegmentDBReadMockRecorder struct {
	mock *MockSegmentDBRead
}

// NewMockSegmentDBRead creates a new mock instance
func NewMockSegmentDBRead(ctrl *gomock.Controller) *MockSegmentDBRead {
	mock := &MockSegmentDBRead{ctrl: ctrl}
	mock.recorder = &MockSegmentDBReadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSegmentDBRead) EXPECT() *MockSegmentDBReadMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockSegmentDBRead) Get(arg0 context.Context, arg1 addr.IA, arg2 []hiddenpath.GroupID) ([]hiddenpath.DBSegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].([]hiddenpath.DBSegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSegmentDBReadMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSegmentDBRead)(nil).Get), arg0, arg1, arg2)
}
