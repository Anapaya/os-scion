// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vFvA7Y8dG3Z1N1qbD5t/BwAA///wiZqaxFQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
