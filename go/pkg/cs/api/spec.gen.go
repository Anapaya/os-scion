// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
