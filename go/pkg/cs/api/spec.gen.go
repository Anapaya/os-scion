// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//8N4nX6ZUcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
