// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"brQ2Hzb/DgAA///LFOqn+lYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
