// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xc63PbNrb/VzDc/dDOUrKs2NtaM/eDIjutZpvEY6u7M61zHYg8EtFAAAuAtnV99b/f",
	"wYMU+JIo20nTO+30Q0SBwHn8zhNHfgwivko5A6ZkMHoMBMiUMwnmw2scX8HvGUilP0WcKWDmnzhNKYmw",
	"Ipwd/SY5089klMAK63/9XcAiGAV/O9pufWS/lUfXCrMYi/hCCC6CzWYTBjHISJBUbxaM9JlIuEP1t+5F",
	"Qw7gyJ6FKX2/CEa/7jkLlitN8CZ8DFLBUxCKWMYIWwqQ8pYwBWKBI9APy3RM7RJULEF8gVQCaG6o6Adh",
	"oNYpBKNAr1iCCDZhkEm8tCfsosvy8bNdq3nU/BIBcTD6Nd8ibKDxQ3Ekn/8GkQo2+glRVD+6nkzfv0Mp",
	"VklPWr5RxJlUIos0R45sTaR3vKYUWLYyB6e3ApZEKmH0GoRBzO9Z9VnEBVSfadnipf3kUTSmlN9DjOx5",
	"yDDmiU0qQdiyQpDVjoLVIULUe+SH/kSk0prC7vC5d7j0TsdC4HUQBhkjv2cwtScqkcEmDCZjfXgZMREI",
	"dXuHKYmJWu+j7d/5uk0YpJySaO8bl3aVxntmdbvPjtyy7Ru3n2B9S+KOL/4L1tPzGvjyw2ubFnyEFUnU",
	"MRkGEy22hfYPUBdkTKQibJkRmUB8y/DKrKlhgsj4Fu8FwVTGY1mVAaZLboD9gFepAcXF5Px63IS854gu",
	"DA6HQ0XcDbIoOPe2b2CvRrpnd574ke/TmjSVYMLqOiJSZiD2seWruTtwS2+1ws9R0MJVpMnuxNtrQTQp",
	"NQb36tq8bdXcTRpVKHZe/2wUGfOsic7b2JOikQeKniTL6XnZqhb49BUenOAgDBZcrLAKRkECDz1nXrtU",
	"N42B6UeGzppVThKIPjV4DqzwfrVB9OlcLzSJhcKE1kP7OI6J/iemiDBLOrERfctcE125syrv9g6vTG6Q",
	"AKYqQZGmoLyXUQSSZMlAIHyHCcVzCk0nCMAumyqfcWWeowUXdn+0wIRmAvbTLBVWmeyQlelVVWQ5j+T2",
	"CK0GPDT9aFme5Cw34CZXh07aCrFfenrVMXe74xsBoNlcoe1qpI81vOv0qyrm2pmWqIYIrt+QddnmGYO/",
	"sckUOqUhFqubSl7xXMEXEndE+3letlphsfYotosRZrFHfItYrlx6XxdPUohtF71OuFV63cs+mSDuSFSo",
	"q2Jndep42uCl/ey8gPnJsCnzPihfqDrQPOKWU23HySXWMnYpdcLTJvLtviXveNxbLAaD0WB0fDzQ6RNW",
	"CoTG23/f3MT/6H3zK+4tBr2zD4/H4clm9O3jcFN+9O3/6nV/99zo9Pq8N77e4zt/4suf4A5oXZo0f1yB",
	"P18uCVsi+3VYlAMxzLOlkclCpxtg6rUPvrtx31RIqMjWbtuUJV4WiXHVTjFht5QsQJFVWfXBd8NksBrI",
	"vadW9mg8XvA5hVVDmGmLGijJVpghATjW/hvBQ0oxM5hGMoVIhzikOFIJkYhHUSYEsG3dmNoDkUqwQkSi",
	"BGi6yKh+g3ITG/1V2pqX5A4Qjo0dcYYSfq8Xp4JHAHEf/UcQpYAhwtAFW1IiE/NWQZ/2mMCWhAEIGaJM",
	"ZpjSNWJcIZkRBbFZwThDCqKEkQhT7Us+QcJpDMJ6FL1ak0fJ/0BcDjcTzhjY4lJx46TnWALSEo8Rz1QT",
	"PAmTCrOmenuMfr6aIgELsFKzYsqxLo1wCim3SjdE0F/20Xxt4gdbIowWAlvbLTYTiAsks3lPV8tWY556",
	"1in00Vu8RnNAmYS4oiDBubKHElm8RJilj2ciAhTxuBKZj9zCo6iQWc9Y1N8U/wSsp02ppxXXM9LrWekV",
	"WVUmSK+QzO4oXxbqLAH042x2mccITRlaAgOBtf7na0M2F2RJGJIg7kC4QLsLwiXeTgevwmCFH8hK+43T",
	"s7MwWBFmPx0PBk2+2jm0OgJkwoUGZxHh6or5o0Gfx7Wf2c5Ezj7QHC5wRrUO8ZxnajSnmH0Kwi7Yt50J",
	"uq4agS8PxJleYNFn+nMPypPbHYkhRuPLaR+9T1PuwOxbkvVehKGrN5Ped98PvgsRMd6JAVEJCCQg4qsV",
	"sNi+O9clZU6oEbiWV8oJU/prbH1kr1BHzKNMG589h3GBlpTPjUosf0VeV1JzN+M5wETa8isLxab4kDcP",
	"a/EBHlLiWl+jxy0BMVZgrLcJDglPu3e2dC7UkFB26E9Ykm3VSrFUt1mqyYq7E6qfS4VXaddXmmrR7Sah",
	"L60KTU4qjS3MIt/aU5c6jluqfGDx7YF9pEOFDGxpk+ZKUmWe55bomCmh+rjJMUqFhbp9ViobB5VtQl8M",
	"BcW1lsCTZV/rCsxPTuOTk3hvV8C9vyefLU7pbj8lDa0Ic83d411Hy6BucNemYK/DCsvbqNzhPKBLVvYe",
	"ZdTYA9F2CSIr67Xna9c40d52djVBeW+n7CmHg+GwNzjuDU5mg7PR6dno1atffD3sNn0RdeiBzq4mVrBm",
	"ObtdChzBbQqC8Lgh/7ia2BwKS6REJpVNn4jUIce8iuyroeFMGwvFCqQyTEaYMa5uWJ6IlTbp33ionHNO",
	"AbOaOZS8T0VvBcfNvPitR86U4BTpdB/yPo5X0TZaR+meq+6a8sdleZnVaAXSXGvsc7ZFTdZ0ussH83Iu",
	"xVJa+4thKXBsHPACE6oflsq67cpKm8flkIVTM4lQ44XO9bYFWm0sP7tKb2TXb8yXvNH3Z+j1GTo5Q5Mh",
	"Gr7R/59N0Pk5Gpyj4RidfofGZ+j8An1/Yb46RW9eocEZOh6g82PfcGSKI4h7ZT9W5Xp2NWlwFplKuCA6",
	"AbqDWywPuOEqglLVMZk7uJfZqgS/pmuY7g7hZfrY3qXHls2wSYxl4j1z1a5jT+yaXU2efDPgGK4TX4up",
	"3QixkC1ToQvpW5at5jb+7M4aiIw7NMgkCIJp06av6svrpheEJaKq+1XE3xTTPaZ5yilfrvc2hasv/tuD",
	"WFlgjKtbvFAVzp4XEPWec1hwAbVNj5+4abW/vj0h9FjwhJlz7MJkXZqbjWvR1cvpy2lRXNnsLo9jroYN",
	"6hEur27Hl1NtiyCk3WvQH/SPtUx4CgynJBgFr/qD/tA2NhOjgiN71W7+vQTV0mjfUuOW22IXC0CfGL9n",
	"eYEaOYryMINmCSABMqNK6sRAV6ILQhWIbR/D5L1ofB0iUhve0OmFGQKojHGg12vkivQQYUpRxkzSUIwO",
	"SEObAJUJBrGmg0g0hwTfES5ySqIEsyXE6J6oxOz+EVP60Rz60Xi0W6w+ohQLvAIFwnToNXxN+jCNg1Hw",
	"A6jXTn5apvlCM+NSyRINl64ZzBc5mVZCOI4N45ouwiKaxYDuCY0jLGKJvhl8i+ZcJQUuptfnhsjxtdcd",
	"K+eUlT420ST8noHQHtpeiFXrjW6DQEWQr/L31naPigkOO7qRqy1XxJbt94yu62DK39Y5M6XmVbeR65ZQ",
	"jcZ7QqnWX6Fen/VuIzEfmmVSjPF0k0Z1JGj/NBIpEztsJqM+RORTVLTt/nl6+urUa9wNmkJCLbnPy3yE",
	"FbpPSJTUtGNUYQygj6YLlDEJxgW4hpVpLyqkHab2l7ou0Im+MzLT20qwRJghWCwgUogsjGX91wJTCR9r",
	"xc9x7/i4NzydHQ9Hw8HodNA/Hf7SgtncKkvy6ObC67qxdpbzLGCJRUy1uvjCr+bMDZ0A+0Hv3m8hDlNa",
	"oqvoIhq+m6qeKk3/ScC07xRHArQfB9egFgpxEYNA32AZATM98nnhAr9to0jv/kySxkoJMs8U6PNyuFh/",
	"rlGiSbOqN4jJAH30/cpH2x6VeXxw/s/v6VsHsSBCmnu6MjpKlWCjE+NCNXNYbVvlJVVpS7/nVfGHldd3",
	"zfUVIPsQlicxh4PBQSOYlXRyG5kPmK2r1wubxvSj+Tp9hVWUaHSVon1fb3qykxnX7f3HYXOl+XVeA0VT",
	"Zgcw3FRp346V2kuG1rREqxQvdfx10gs+6NfyJOfo0XXJeiTetGY8P1hv5xcBZjZxe5Hln7kjKdiXE8y2",
	"XUY0PS+nOEX7UXtg/ZiwNFPOxoi0ly7aVSSYadKKbUI0z5TVY3H1AAvyUGlrugPhAUeKrhFn+cFh7ulN",
	"wmRIIbISalPKYyiciLFLnVB6ZlmIOfBzZ1sgdBw59vuBUq2NP5DEOIZnG1oXM6pDsqHbWpqQ2BpJ0/4F",
	"wUfegHYZ1DnyfHxVa9EmeEfYA3MNjBMcfEZxTcaNosqiCKRcZBS9z+l5vnymW2kjczNnpDUZ9z3BRGn6",
	"ieRy2TYOOxQ4LrGha4QjRe6gPnDXUvbcsB11T1PZY8NgH73JhI73Ky4gvGHaBvXiFEuJsK47FIkyioW7",
	"qSM2/djmbYboLY03zBFZpG8IS+s3+miMXJDP6SkuGk2yoa1bp9w3zJdZWMmKVAJEuKJWf77DxDW0TVu3",
	"jjxf/jVn2Jj5PrkcefF0sUuKV8ufnuuYOk6vFTOy9WDfGtrraP7jo3pbUG+gdb+FHz2apZ1ie32WVhfX",
	"2AzvMOQGZ/ejugXU5WCYU/XkUFhMNX/WuGenyht0VhsE/upw06rVw1BzNKd8/gToAIt4bG+6Li/eovla",
	"gUR6r6eB6rWm4qsG1kMvhVVvQWilx9rT/72++GH6Dk0urmbTN9PJeHZhnt6w8bUPpH6/f8PMNxfvzhtW",
	"79xqMj5kq6ADpI26/jy4tuS2gJuzBVnuTAjtir0qV/CgjlLqfmxSi3pFsPxC2d+lIEzZkmb2/u1PyDKa",
	"uTaNRmMpD+SrVZEgb8ekG037UoDU2bw3qV6+L0WYcrbcNorhAaJMQVwfP68J281ef0bHXZkRb9LHjrHu",
	"F0jKY1LMWcrSSb4+8mFzo4/87qMNoVM7pPznwudrLEnkCxeleAleoVKpEuxMsJStqKV8eVTMf7eJqhgd",
	"/4wIK874YrLUno9WZtxrMgqDNGsQynVFKGb/1zxefxF55JP5/vnbyLz5f6Wl6y5a0kh27ZLOt4x+j6Xt",
	"rvHwO0bMYgT23qwy44emTKYQKddpi8kdiTNMtyTYRE4X6sj+0gBidEfgvtHlX+fcHngn2DRx+OVv8mYg",
	"VoRhinYQNcyJGrYSVZpfPIykL1JEl4ZQDyijKx3yElL7X29F3UCtZ6zuUcVaX7Zd7p+9y2zqVvOFG87y",
	"S3eci7948ZyW89dVsewfTO6OvG5lecOJrXX5Lvg1V99/Pgh2qNEvx7Mf0fXFD28v3s1crWykeIlVkg9b",
	"l4vrhjeCTqD9qsvrNnpbUVqMmLcl5W4I/XP6DHvCly6+SeMNzPga+R2V/Pd3Wk5+4dOzo9huULrt0sZK",
	"96m9ONN2Kxt+S8fNSnDi2oR/db9e7vryoHaV8sZK28ypGD39jAZVnPFH9LMcB8W83Pga5XLZ3dhSIupQ",
	"VLlfZ1g/NzM/xrjiXKGJ30GzRQ7gKDEDhgcPeLZcdPbR+9SOCtO1ndWcXU2KQs05ZjPyJxVgc61oRsg8",
	"ujmD5t7aTHPfLVbX7xlLZUlRMjT87rX2JyJsWNaOMPi6LwqLgfkD6ht37JyCUdQLNAgLGOr92ryAiOQR",
	"kfEjkfGmN3+cYwmbnny08+qbjtlfG7RbIsBMRJ3uWSxY2lO6nTP8BULKe2oGu2163HlPK6xuuzb9fOBz",
	"1jizq0kT6mZXkxecm9GHPAlfh5QYbSDLy4w8+dDlhq02WtHX+abvLwQ+MRGbXU1cHvTLb+P797+N//l2",
	"dnE/rWRN21VBI0RfOD8qdmzAqv3Nz12OhUzQYBQkSqWjo6PHhEu1GT2mXKiN+dWVINpR278ExKWqDMDy",
	"CFPz2PxBQ1H5+tXg5HSobfJDQUbth413INbKdLsEUPPHJxRvbnxVy+Cg3ljctdvk8vJfU7TCygDI284K",
	"pr7ZxGRBaHw5RfBQ/NzWbuaSE58qlzQ1EMViM10lfZq8e8DtzycbdnV3WpsPm/8LAAD//wYN05+RVQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
