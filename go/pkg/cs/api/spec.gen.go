// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
