// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xVTW/bMAz9KwK3oxGnHyff1m4oAqRrsexW5KDIjKNCljRKDhoE/u8DpSRtnBYddiiw",
	"3WRSfnx8eqK2oFzrnUUbA1RbIAze2YDp40rWP/BXhyHyl3I2ok1L6b3RSkbtbPkYnOVYUCtsJa8+Ey6h",
	"gk/lM3SZs6GcRWlrSfU3IkfQ930BNQZF2jMYVFxT0K4oZ3c/Mu7UNVNco+G1J+eRos5EzT58jDV1TaNt",
	"I3K6ALRdC9UD1LjoGihA26XjcOIyLwCfZOsNQrXPxI3nrxBJ2ybRYWqasGaYDDs/bHOLR1QR+gKOuzyh",
	"i/vwMd20W7QYgmzw3eoH1oPqvC/RP8GfIa21QnErrWywRRvFl/uJWDoScYVidj25+y6+6uBlVCskZqBj",
	"kuM5OPgZClgjhYw/Hp2Nxty+82il11DBxWg8OocCvIyr1HqpnF3qhpcNJi+xMMlJkxoquMF4nXcUx148",
	"H48HJoz4FEtvpB7YbyjbicVmnVIYwrIz4m5fnGlf5hKv2fdApXxxJ5I9u7aVtIEK7knbGJKSP+9upyI3",
	"2mV4sdQGR6yobAKfnnJt6yzMGaPcH9dbikyyG/8tPa5k0Epwa9RmDbxsUMiF62JSiamTMyLsbOnJMY03",
	"VTKuKQ8X/S2pDjPiXbn+foYdanyYljcYhRkMsxONCvDdK6LMBqIk/CtXbz5Ej/0Iflk/T7BIHfb/1SnN",
	"/uSU0i9IPDWhethCRwYqWMXoq7LcrlyIfbX1jmJf8ggtYC1Jy4XJAnE+D/al7EyECoxT0qQwG8DRIH0x",
	"vrw8YwnmBy7DZ+E6UUtPAT55F7AWi83uNdjdzXQprWx5juw66ef97wAAAP//J5wUAjwIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
